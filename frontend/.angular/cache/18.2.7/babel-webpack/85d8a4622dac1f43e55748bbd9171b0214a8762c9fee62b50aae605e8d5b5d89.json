{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl + '/products';\n    }\n    // совместимость: старые места могли вызывать getAll()\n    getAll() {\n      return this.http.get(this.apiUrl);\n    }\n    // компоненты ожидают list(search?)\n    list(search) {\n      const url = search ? `${this.apiUrl}?q=${encodeURIComponent(search)}` : this.apiUrl;\n      return this.http.get(url);\n    }\n    get(id) {\n      return this.http.get(`${this.apiUrl}/${id}`);\n    }\n    // простые обёртки для регистрации/логина (если бэкенд такие роуты поддерживает)\n    register(username, password, full) {\n      return this.http.post(environment.apiUrl + '/auth/register', {\n        username,\n        password,\n        full\n      });\n    }\n    login(username, password) {\n      return this.http.post(environment.apiUrl + '/auth/login', {\n        username,\n        password\n      });\n    }\n    static {\n      this.ɵfac = function ProductService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ProductService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ProductService,\n        factory: ProductService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}