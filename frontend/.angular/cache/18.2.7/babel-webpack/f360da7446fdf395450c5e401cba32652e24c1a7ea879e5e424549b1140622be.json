{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor() {\n      this.items = [];\n      this.itemsSubject = new BehaviorSubject([]);\n      this.cart$ = this.itemsSubject.asObservable();\n      this.cartUpdated = new Subject();\n      this.load();\n    }\n    emit() {\n      this.itemsSubject.next([...this.items]);\n      this.save();\n      this.cartUpdated.next();\n    }\n    add(item) {\n      const idx = this.items.findIndex(i => i.id === item.id);\n      if (idx > -1) {\n        this.items[idx].qty = (this.items[idx].qty || 1) + 1;\n      } else {\n        this.items.push({\n          ...item,\n          qty: 1\n        });\n      }\n      this.emit();\n    }\n    // alias — компоненты используют addToCart иногда\n    addToCart(item) {\n      this.add(item);\n    }\n    remove(id) {\n      this.items = this.items.filter(i => i.id !== id);\n      this.emit();\n    }\n    updateQty(id, qty) {\n      const i = this.items.find(it => it.id === id);\n      if (i) {\n        i.qty = qty;\n        if (i.qty <= 0) this.remove(id);else this.emit();\n      }\n    }\n    clear() {\n      this.items = [];\n      this.emit();\n    }\n    total() {\n      return this.items.reduce((sum, i) => sum + (i.price || 0) * (i.qty || 1), 0);\n    }\n    getItems() {\n      return [...this.items];\n    }\n    getCount() {\n      return this.items.reduce((s, i) => s + (i.qty || 1), 0);\n    }\n    load() {\n      try {\n        const raw = localStorage.getItem('cart_v1');\n        this.items = raw ? JSON.parse(raw) : [];\n        this.itemsSubject.next([...this.items]);\n      } catch {\n        this.items = [];\n      }\n    }\n    save() {\n      localStorage.setItem('cart_v1', JSON.stringify(this.items));\n    }\n    static {\n      this.ɵfac = function CartService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || CartService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CartService,\n        factory: CartService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}