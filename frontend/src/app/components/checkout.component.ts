import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { CartService } from '../services/cart.service';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-checkout',
  templateUrl: './checkout.component.html',
  styleUrls: ['./checkout.component.css']
})
export class CheckoutComponent implements OnInit {
  @ViewChild('firstNameInput') firstNameInput!: ElementRef;
  @ViewChild('lastNameInput') lastNameInput!: ElementRef;
  @ViewChild('emailInput') emailInput!: ElementRef;
  @ViewChild('phoneInput') phoneInput!: ElementRef;
  @ViewChild('addressInput') addressInput!: ElementRef;
  @ViewChild('cityInput') cityInput!: ElementRef;
  @ViewChild('postalCodeInput') postalCodeInput!: ElementRef;
  @ViewChild('commentInput') commentInput!: ElementRef;

  items: any[] = [];
  total = 0;
  isSubmitting = false;

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  customerData: any = null;

  constructor(
    private cartService: CartService, 
    private router: Router,
    private http: HttpClient
  ) {}

  ngOnInit(): void {
    this.items = this.cartService.getItems();
    this.total = this.cartService.total();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.loadCustomerData();
    
    if (this.items.length === 0) {
      this.router.navigate(['/']);
      alert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.');
    }

    console.log('‚úÖ CheckoutComponent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  loadCustomerData(): void {
    const savedData = localStorage.getItem('customerData');
    if (savedData) {
      this.customerData = JSON.parse(savedData);
      console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.customerData);
      
      // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
      setTimeout(() => {
        this.autofillForm();
      }, 100);
    }
  }

  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
  autofillForm(): void {
    if (this.customerData) {
      try {
        // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –Ω–∞ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
        const nameParts = this.customerData.name.split(' ');
        const firstName = nameParts[0] || '';
        const lastName = nameParts.slice(1).join(' ') || '';

        if (this.firstNameInput?.nativeElement) {
          this.firstNameInput.nativeElement.value = firstName;
        }
        if (this.lastNameInput?.nativeElement) {
          this.lastNameInput.nativeElement.value = lastName;
        }
        if (this.emailInput?.nativeElement) {
          this.emailInput.nativeElement.value = this.customerData.email || '';
        }
        if (this.phoneInput?.nativeElement) {
          this.phoneInput.nativeElement.value = this.customerData.phone || '';
        }
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –Ω–∞ –≥–æ—Ä–æ–¥ –∏ –∞–¥—Ä–µ—Å
        const addressParts = (this.customerData.address || '').split(',');
        const city = addressParts[0]?.trim() || '';
        const address = addressParts.slice(1).join(',').trim() || '';

        if (this.cityInput?.nativeElement) {
          this.cityInput.nativeElement.value = city;
        }
        if (this.addressInput?.nativeElement) {
          this.addressInput.nativeElement.value = address;
        }
        if (this.postalCodeInput?.nativeElement && this.customerData.postalCode) {
          this.postalCodeInput.nativeElement.value = this.customerData.postalCode;
        }

        console.log('‚úÖ –§–æ—Ä–º–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
      }
    }
  }

  submitOrder(): void {
    if (this.isSubmitting) return;
    
    this.isSubmitting = true;
    console.log(' –ú–µ—Ç–æ–¥ submitOrder –≤—ã–∑–≤–∞–Ω!');
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–Ω–ø—É—Ç–æ–≤
    const formData = {
      firstName: this.firstNameInput.nativeElement.value,
      lastName: this.lastNameInput.nativeElement.value,
      email: this.emailInput.nativeElement.value,
      phone: this.phoneInput.nativeElement.value,
      address: this.addressInput.nativeElement.value,
      city: this.cityInput.nativeElement.value,
      postalCode: this.postalCodeInput.nativeElement.value,
      comment: this.commentInput.nativeElement.value
    };

    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!formData.firstName || !formData.lastName || !formData.email || !formData.phone || !formData.address || !formData.city) {
      alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)');
      this.isSubmitting = false;
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ localStorage –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
    this.saveCustomerData(formData);

    const orderData = {
      customer_name: `${formData.firstName} ${formData.lastName}`,
      customer_email: formData.email,
      customer_phone: formData.phone,
      customer_address: `${formData.city}, ${formData.address}`,
      comment: formData.comment,
      total_amount: this.total + 500,
      items: this.items.map(item => ({
        product_id: item.id,
        product_title: item.name || item.title,
        quantity: item.qty,
        price: item.price
      }))
    };

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', orderData);

    this.http.post('http://localhost:8000/api/orders', orderData).subscribe({
      next: (response: any) => {
        console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', response);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.saveOrderToHistory(orderData, response.id || response.order_id);
        
        alert('üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéÄ');
        this.cartService.clear();
        this.isSubmitting = false;
        this.router.navigate(['/account']);
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        this.isSubmitting = false;
        if (error.status === 0) {
          alert('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥.');
        } else {
          // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ
          this.saveOrderToHistory(orderData, Date.now().toString());
          alert('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–∑–∂–µ.');
          this.cartService.clear();
          this.router.navigate(['/account']);
        }
      }
    });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private saveCustomerData(formData: any): void {
    const customerData = {
      name: `${formData.firstName} ${formData.lastName}`,
      email: formData.email,
      phone: formData.phone,
      address: `${formData.city}, ${formData.address}`,
      postalCode: formData.postalCode
    };
    
    localStorage.setItem('customerData', JSON.stringify(customerData));
    console.log('üíæ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', customerData);
  }

  private saveOrderToHistory(orderData: any, orderId: string): void {
    const orderHistory = JSON.parse(localStorage.getItem('orderHistory') || '[]');
    const newOrder = {
      id: orderId || Date.now().toString(),
      date: new Date().toISOString(),
      status: 'pending',
      items: orderData.items,
      total: orderData.total_amount,
      customer: {
        name: orderData.customer_name,
        email: orderData.customer_email,
        phone: orderData.customer_phone,
        address: orderData.customer_address
      },
      comment: orderData.comment
    };
    
    orderHistory.unshift(newOrder);
    localStorage.setItem('orderHistory', JSON.stringify(orderHistory));
    console.log('üíæ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é:', newOrder);
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  clearCustomerData(): void {
    localStorage.removeItem('customerData');
    this.customerData = null;
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    if (this.firstNameInput?.nativeElement) this.firstNameInput.nativeElement.value = '';
    if (this.lastNameInput?.nativeElement) this.lastNameInput.nativeElement.value = '';
    if (this.emailInput?.nativeElement) this.emailInput.nativeElement.value = '';
    if (this.phoneInput?.nativeElement) this.phoneInput.nativeElement.value = '';
    if (this.addressInput?.nativeElement) this.addressInput.nativeElement.value = '';
    if (this.cityInput?.nativeElement) this.cityInput.nativeElement.value = '';
    if (this.postalCodeInput?.nativeElement) this.postalCodeInput.nativeElement.value = '';
    if (this.commentInput?.nativeElement) this.commentInput.nativeElement.value = '';
    
    alert('üßπ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –æ—á–∏—â–µ–Ω—ã');
  }
}